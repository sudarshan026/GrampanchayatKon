
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://zhmyxotzcenfdjvvzxqv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpobXl4b3R6Y2VuZmRqdnZ6eHF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMzNDE2MjMsImV4cCI6MjA1ODkxNzYyM30.wvNtSqef1z58XsTcXsCwYTyfOQZBFPNxeT3uhEHwn-I";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof window !== 'undefined' ? localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Type for handling Supabase profile join errors
export type ProfileJoinError = { error: true } & String;

// Helper function to safely access profile data
export const getProfileData = (profiles: any): any => {
  if (!profiles) return null;
  
  // If profiles is an array, return the first item
  if (Array.isArray(profiles)) {
    return profiles.length > 0 ? profiles[0] : null;
  }
  
  // If profiles is already an object (not an array), return it directly
  return profiles;
};

// Demo account credentials
export const demoAccounts = {
  citizen: { email: 'demo.citizen@example.com', password: 'demo123' },
  staff: { email: 'demo.staff@example.com', password: 'demo123' },
  admin: { email: 'demo.admin@example.com', password: 'demo123' }
};

// Helper function to create demo accounts if they don't exist
export const ensureDemoAccount = async (role: 'citizen' | 'staff' | 'admin') => {
  // First check if the profile exists already by querying the profiles table
  try {
    const { data: existingProfile } = await supabase
      .from('profiles')
      .select('id, email')
      .eq('email', demoAccounts[role].email)
      .maybeSingle();
    
    if (existingProfile) {
      console.log(`Demo ${role} account exists with id: ${existingProfile.id}`);
      return { data: { user: { id: existingProfile.id } } };
    }
    
    // If we don't find the profile, try to create a new user
    console.log(`Creating demo ${role} account`);
    
    // First check if user exists in auth but not in profiles
    const { data: authUser, error: authCheckError } = await supabase.auth.signInWithPassword({
      email: demoAccounts[role].email,
      password: demoAccounts[role].password,
    });
    
    if (!authCheckError && authUser?.user) {
      // User exists in auth but not in profiles, create profile
      const { data: newProfile, error: profileError } = await supabase
        .from('profiles')
        .insert({
          id: authUser.user.id,
          name: `Demo ${role.charAt(0).toUpperCase() + role.slice(1)}`,
          email: demoAccounts[role].email,
          role: role,
          phone: '+91 9876543210',
          address: role === 'citizen' ? 'Kon Village, Kalyan West, Thane District' : 'Gram Panchayat Office, Kon, Kalyan West, Thane District'
        })
        .select()
        .single();
      
      if (profileError) {
        console.error('Error creating profile for existing auth user:', profileError);
      } else {
        console.log(`Created profile for existing auth user: ${newProfile.id}`);
        return { data: { user: { id: authUser.user.id } } };
      }
    }
    
    // Create new auth user
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: demoAccounts[role].email,
      password: demoAccounts[role].password,
      options: {
        data: {
          name: `Demo ${role.charAt(0).toUpperCase() + role.slice(1)}`,
          role: role,
          phone: '+91 9876543210',
          address: role === 'citizen' ? 'Kon Village, Kalyan West, Thane District' : 'Gram Panchayat Office, Kon, Kalyan West, Thane District'
        }
      }
    });
    
    if (authError) {
      console.error('Error creating auth user:', authError);
      throw authError;
    }
    
    if (!authData.user) {
      throw new Error('Failed to create user');
    }
    
    // Ensure staff members are added to the staff table
    if (role === 'staff' || role === 'admin') {
      const { error: staffError } = await supabase
        .from('staff')
        .insert({
          user_id: authData.user.id,
          position: role === 'admin' ? 'Administrator' : 'Support Staff',
          department: role === 'admin' ? 'Administration' : 'Citizen Support',
        });
      
      if (staffError) {
        console.error('Error creating staff record:', staffError);
      }
    }
    
    return { data: { user: { id: authData.user.id } } };
  } catch (error) {
    console.error('Error creating demo account:', error);
    return { error };
  }
};

// Helper function for demo login
export const loginWithDemo = async (role: 'citizen' | 'staff' | 'admin') => {
  try {
    // Try to sign in directly first
    const { data, error } = await supabase.auth.signInWithPassword({
      email: demoAccounts[role].email,
      password: demoAccounts[role].password,
    });
    
    if (!error && data.session) {
      // Verify profile exists
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', data.user.id)
        .maybeSingle();
      
      if (profileError || !profile) {
        console.log('Profile missing for authenticated user, creating now...');
        
        // Create profile if it doesn't exist
        await supabase
          .from('profiles')
          .insert({
            id: data.user.id,
            name: `Demo ${role.charAt(0).toUpperCase() + role.slice(1)}`,
            email: demoAccounts[role].email,
            role: role,
            phone: '+91 9876543210',
            address: role === 'citizen' ? 'Kon Village, Kalyan West, Thane District' : 'Gram Panchayat Office, Kon, Kalyan West, Thane District'
          });
          
        // Ensure staff members are added to the staff table
        if ((role === 'staff' || role === 'admin') && data.user) {
          const { data: existingStaff } = await supabase
            .from('staff')
            .select('id')
            .eq('user_id', data.user.id)
            .maybeSingle();
            
          if (!existingStaff) {
            await supabase
              .from('staff')
              .insert({
                user_id: data.user.id,
                position: role === 'admin' ? 'Administrator' : 'Support Staff',
                department: role === 'admin' ? 'Administration' : 'Citizen Support',
              });
          }
        }
      }
      
      return { data, error: null };
    }
    
    // If direct sign-in failed, ensure the account exists and try again
    const { data: accountData, error: accountError } = await ensureDemoAccount(role);
    
    if (accountError) {
      throw accountError;
    }
    
    // Try signing in again
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email: demoAccounts[role].email,
      password: demoAccounts[role].password,
    });
    
    if (signInError) {
      // In case of errors, provide helpful message
      console.warn('Demo login failed after account creation', signInError);
      toast.error('Failed to login with demo account. Please try again.');
      throw new Error('Demo login failed: ' + signInError.message);
    }
    
    return { data: signInData, error: null };
  } catch (error) {
    console.error('Demo login error:', error);
    return { data: null, error };
  }
};
